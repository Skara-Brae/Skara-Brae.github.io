<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode Q12 3 sum</title>
    <url>/2021/01/02/LeetCode-Q12-3-sum/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;1.Sort array</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        &#x2F;&#x2F;2. Creat a double Linkedlist</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line">        for(int i &#x3D; 0; i &lt; nums.length - 2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;3. if i &#x3D; 0 or the 2nd number is not equal to previous number</span><br><span class="line">            &#x2F;&#x2F;为了保证不加入重复的 list,因为是有序的，所以如果和前一个元素相同，只需要继续后移就可以</span><br><span class="line">            if(i &#x3D;&#x3D; 0 || (i &gt; 0 &amp;&amp; nums[i] !&#x3D; nums[i - 1]))</span><br><span class="line">            &#123;</span><br><span class="line">                 &#x2F;&#x2F;两个指针,并且头指针从i + 1开始，防止加入重复的元素</span><br><span class="line">                int lo &#x3D; i + 1, hi &#x3D; nums.length - 1, sum &#x3D; 0 - nums[i];</span><br><span class="line">                while(lo &lt; hi)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(nums[lo] + nums[hi] &#x3D;&#x3D; sum)</span><br><span class="line">                    &#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i], nums[lo], nums[hi]));</span><br><span class="line">                        while(lo &lt; hi &amp;&amp; nums[lo] &#x3D;&#x3D; nums[lo + 1]) lo++;</span><br><span class="line">                        while(lo &lt; hi &amp;&amp; nums[hi] &#x3D;&#x3D; nums[hi - 1]) hi--;</span><br><span class="line">                        lo++;</span><br><span class="line">                        hi--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if(nums[lo] + nums[hi] &lt; sum) lo++;</span><br><span class="line">                    else hi--;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q11 Container With Most Water</title>
    <url>/2021/01/02/LeetCode-Q11-Container-With-Most-Water/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public int maxArea(int[] height)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;initialize area, most left side and right side</span><br><span class="line">       int area &#x3D; 0, l &#x3D; 0, r &#x3D; height.length - 1;</span><br><span class="line">        &#x2F;&#x2F;as long as left is on the &quot;left&quot;</span><br><span class="line">        while(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            area &#x3D; Math.max(area, Math.min(height[l], height[r]) * (r - l));</span><br><span class="line">            if(height[l] &lt; height[r])</span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return area;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode Q17 Letter Combinations of a Phone</title>
    <url>/2021/01/02/LeetCode-Q17-Letter-Combinations-of-a-Phone/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  Map&lt;String, String&gt; phone &#x3D; new HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">    put(&quot;2&quot;, &quot;abc&quot;);</span><br><span class="line">    put(&quot;3&quot;, &quot;def&quot;);</span><br><span class="line">    put(&quot;4&quot;, &quot;ghi&quot;);</span><br><span class="line">    put(&quot;5&quot;, &quot;jkl&quot;);</span><br><span class="line">    put(&quot;6&quot;, &quot;mno&quot;);</span><br><span class="line">    put(&quot;7&quot;, &quot;pqrs&quot;);</span><br><span class="line">    put(&quot;8&quot;, &quot;tuv&quot;);</span><br><span class="line">    put(&quot;9&quot;, &quot;wxyz&quot;);</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"></span><br><span class="line">  List&lt;String&gt; output &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">  public void backtrack(String combination, String next_digits) &#123;</span><br><span class="line">    &#x2F;&#x2F; if there is no more digits to check</span><br><span class="line">    if (next_digits.length() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">      &#x2F;&#x2F; the combination is done</span><br><span class="line">      output.add(combination);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; if there are still digits to check</span><br><span class="line">    else &#123;</span><br><span class="line">      &#x2F;&#x2F; iterate over all letters which map</span><br><span class="line">      &#x2F;&#x2F; the next available digit</span><br><span class="line">      String digit &#x3D; next_digits.substring(0, 1);</span><br><span class="line">      String letters &#x3D; phone.get(digit);</span><br><span class="line">      for (int i &#x3D; 0; i &lt; letters.length(); i++) &#123;</span><br><span class="line">        String letter &#x3D; phone.get(digit).substring(i, i + 1);</span><br><span class="line">        &#x2F;&#x2F; append the current letter to the combination</span><br><span class="line">        &#x2F;&#x2F; and proceed to the next digits</span><br><span class="line">        &#x2F;&#x2F; letter往后一直移动是因为从a到b,b到c， c到d。。。这样</span><br><span class="line">        backtrack(combination + letter, next_digits.substring(1));</span><br><span class="line">        &#x2F;&#x2F; backtrack(letter + combination, next_digit.substring(1));</span><br><span class="line">&#x2F;&#x2F;Output [&quot;da&quot;,&quot;ea&quot;,&quot;fa&quot;,&quot;db&quot;,&quot;eb&quot;,&quot;fb&quot;,&quot;dc&quot;,&quot;ec&quot;,&quot;fc&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public List&lt;String&gt; letterCombinations(String digits) &#123;</span><br><span class="line">    if (digits.length() !&#x3D; 0)</span><br><span class="line">      backtrack(&quot;&quot;, digits);</span><br><span class="line">    return output;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q19 Remove Nth Node From End of List</title>
    <url>/2021/01/02/LeetCode-Q19-Remove-Nth-Node-From-End-of-List/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public ListNode removeNthFromEnd(ListNode head, int n)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;1. create a dummyHead before the real head</span><br><span class="line">        ListNode dummyHead &#x3D; new ListNode(0);</span><br><span class="line">        dummyHead.next &#x3D; head;</span><br><span class="line">        ListNode first &#x3D; head;</span><br><span class="line">        int length &#x3D; 0;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;as long as first is not null, we increase length</span><br><span class="line">        &#x2F;&#x2F;and keep moving first</span><br><span class="line">        while(first !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            length++;</span><br><span class="line">            first &#x3D; first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;use length - n to locate the node we are going to delete</span><br><span class="line">        length -&#x3D;n;</span><br><span class="line">        first &#x3D; dummyHead;</span><br><span class="line">        while(length &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            length--;</span><br><span class="line">            first &#x3D; first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        first.next &#x3D; first.next.next;</span><br><span class="line">        return dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q20 Valid Parentheses</title>
    <url>/2021/01/02/LeetCode-Q20-Valid-Parentheses/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    public boolean isValid(String s)</span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;Character&gt; brackets &#x3D; new Stack&lt;Character&gt;();</span><br><span class="line">        for(int i &#x3D; 0; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            char c &#x3D; s.charAt(i);</span><br><span class="line">            switch(c)</span><br><span class="line">            &#123;</span><br><span class="line">                case &#39;(&#39;:</span><br><span class="line">                case &#39;&#123;&#39;:</span><br><span class="line">                case &#39;[&#39;:</span><br><span class="line">                brackets.push(c);</span><br><span class="line">                break;</span><br><span class="line">                    </span><br><span class="line">                case &#39;)&#39;:</span><br><span class="line">                    if(!brackets.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        if(brackets.peek() &#x3D;&#x3D; &#39;(&#39;)</span><br><span class="line">                        &#123;</span><br><span class="line">                            brackets.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                    </span><br><span class="line">                case &#39;&#125;&#39;:</span><br><span class="line">                    if(!brackets.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        if(brackets.peek() &#x3D;&#x3D; &#39;&#123;&#39;)</span><br><span class="line">                        &#123;</span><br><span class="line">                            brackets.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                    </span><br><span class="line">                    case &#39;]&#39;:</span><br><span class="line">                    if(!brackets.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        if(brackets.peek() &#x3D;&#x3D; &#39;[&#39;)</span><br><span class="line">                        &#123;</span><br><span class="line">                            brackets.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return brackets.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode Q5 Longest Palindromic Substring</title>
    <url>/2021/01/02/LeetCode-Q5-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public String longestPalindrome(String s)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s &#x3D;&#x3D; null || s.length() &lt; 1) return &quot;&quot;;</span><br><span class="line">        int start &#x3D; 0, end &#x3D; 0;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int len1 &#x3D; expandAroundCenter(s, i, i);</span><br><span class="line">            int len2 &#x3D; expandAroundCenter(s, i, i + 1);</span><br><span class="line">            int len &#x3D; Math.max(len1, len2);</span><br><span class="line">            if(len &gt; end - start)</span><br><span class="line">            &#123;</span><br><span class="line">                start &#x3D; i - (len-1)&#x2F;2;</span><br><span class="line">                end &#x3D; i + len&#x2F;2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return s.substring(start, end + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private int expandAroundCenter(String s, int left, int right)</span><br><span class="line">    &#123;</span><br><span class="line">        int L &#x3D; left, R &#x3D; right;</span><br><span class="line">        while(L &gt;&#x3D; 0 &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) &#x3D;&#x3D; s.charAt(R))</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        return R - L - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode Q21 Merge Two Sorted Lists</title>
    <url>/2021/01/02/LeetCode-Q21-Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution </span><br><span class="line">&#123;</span><br><span class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) </span><br><span class="line">    &#123;</span><br><span class="line">        if(l1 &#x3D;&#x3D; null) return l2;</span><br><span class="line">        if(l2 &#x3D;&#x3D; null) return l1;</span><br><span class="line">        </span><br><span class="line">        if(l1.val &lt; l2.val)</span><br><span class="line">        &#123;</span><br><span class="line">            l1.next &#x3D; mergeTwoLists(l1.next, l2);</span><br><span class="line">            return l1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            l2.next &#x3D; mergeTwoLists(l1, l2.next);</span><br><span class="line">            return l2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode Q1 Two Sum</title>
    <url>/2020/10/04/Leetcode%20Q1%20Two%20Sum/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target)</span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        for(int i &#x3D; 0; i &lt; nums.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int n &#x3D; target - nums[i];</span><br><span class="line">            if(map.containsKey(n))</span><br><span class="line">            &#123;</span><br><span class="line">                return new int[] &#123;map.get(n), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    throw new IllegalArgumentException(&quot;No two sum solution&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Q2 Add Two Numbers</title>
    <url>/2021/01/01/Leetcode%20Q2%20Add%20Two%20Numbers/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public ListNode addTwoNumbers(ListNode l1, ListNode l2)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;initiate new dummyHead, it points to first node</span><br><span class="line">        ListNode dummyHead &#x3D; new ListNode(0);</span><br><span class="line">        &#x2F;&#x2F;ListNode should have p, q, curr</span><br><span class="line">        ListNode p &#x3D; l1, q &#x3D; l2, curr &#x3D; dummyHead;</span><br><span class="line">        &#x2F;&#x2F;Initiate a carry value</span><br><span class="line">        int carry &#x3D; 0;</span><br><span class="line">        while(p !&#x3D; null || q !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            int x &#x3D; (p !&#x3D; null) ? p.val : 0;</span><br><span class="line">            int y &#x3D; (q !&#x3D; null) ? q.val : 0;</span><br><span class="line">            int sum &#x3D; x + y + carry;</span><br><span class="line">            &#x2F;&#x2F;re-value carry</span><br><span class="line">            carry &#x3D; sum &#x2F; 10;</span><br><span class="line">            &#x2F;&#x2F;curr next node is backward</span><br><span class="line">            curr.next &#x3D; new ListNode(sum % 10);</span><br><span class="line">            curr &#x3D; curr.next;</span><br><span class="line">            if(p !&#x3D; null) p &#x3D; p.next;</span><br><span class="line">            if(q !&#x3D; null) q &#x3D; q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(carry &gt; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            curr.next &#x3D; new ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        return dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Grammar / Web Delopyment</title>
    <url>/2020/10/04/hello-world/</url>
    <content><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Check <a href="https://hexo.io/docs/">documentation</a> for more info. </p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="Generate-with-Debugger"><a href="#Generate-with-Debugger" class="headerlink" title="Generate with Debugger"></a>Generate with Debugger</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="Frequently-Used-Color"><a href="#Frequently-Used-Color" class="headerlink" title="Frequently Used Color"></a>Frequently Used Color</h3><p><font size=5 color="#3cff00"> Set Color and Font</font><br><font size=5 color="#0048ff"> Set Color and Font</font><br><font size=5 color="#c800ff"> Set Color and Font</font></p>
]]></content>
      <categories>
        <category>Web Note</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Q3 Longest Substring Without Repeating Characters</title>
    <url>/2021/01/01/Leetcode-Q3-Longest-Substring-Without-Repeating-Characters/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution </span><br><span class="line">&#123;</span><br><span class="line">    public int lengthOfLongestSubstring(String s) </span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; s: &quot;abcabcbb&quot;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Character, Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; s: &quot;abcabcbb&quot;</span><br><span class="line">           map: &#123;&#125; </span><br><span class="line">        </span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        &#x2F;&#x2F; s: &quot;abcabcbb&quot;</span><br><span class="line">           map: &#123;&#125;</span><br><span class="line">           ans: 0</span><br><span class="line">        </span><br><span class="line">        for(int i &#x3D; 0, j &#x3D; 0; j &lt; s.length(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        s: &quot;abcabcbb&quot;</span><br><span class="line">        map: &#123;&#125;</span><br><span class="line">        ans: 0</span><br><span class="line">        i: 0</span><br><span class="line">        j: 0</span><br><span class="line">        *&#x2F;</span><br><span class="line">            if(map.containsKey(s.charAt(j)))</span><br><span class="line">            &#123;</span><br><span class="line">                i &#x3D; Math.max(map.get(s.charAt(j)), i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans &#x3D; Math.max(ans, j - i + 1);</span><br><span class="line">            &#x2F;*</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&#125;</span><br><span class="line">            ans: 1</span><br><span class="line">            i: 0</span><br><span class="line">            j: 0</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">            map.put(s.charAt(j), j + 1);</span><br><span class="line">            &#x2F;*</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&quot;a&quot;:1&#125;</span><br><span class="line">            ans: 1</span><br><span class="line">            i: 0</span><br><span class="line">            j: 0</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">            &#x2F;*</span><br><span class="line">            Second round</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">            ans: 2</span><br><span class="line">            i: 0</span><br><span class="line">            j: 1</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">            &#x2F;*</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">            ans: 3</span><br><span class="line">            i: 0</span><br><span class="line">            j: 2</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
</search>
