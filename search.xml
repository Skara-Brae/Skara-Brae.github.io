<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode Q11 Container With Most Water</title>
    <url>/2021/01/02/LeetCode-Q11-Container-With-Most-Water/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public int maxArea(int[] height)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;initialize area, most left side and right side</span><br><span class="line">       int area &#x3D; 0, l &#x3D; 0, r &#x3D; height.length - 1;</span><br><span class="line">        &#x2F;&#x2F;as long as left is on the &quot;left&quot;</span><br><span class="line">        while(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            area &#x3D; Math.max(area, Math.min(height[l], height[r]) * (r - l));</span><br><span class="line">            if(height[l] &lt; height[r])</span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return area;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode Q17 Letter Combinations of a Phone</title>
    <url>/2021/01/02/LeetCode-Q17-Letter-Combinations-of-a-Phone/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  Map&lt;String, String&gt; phone &#x3D; new HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">    put(&quot;2&quot;, &quot;abc&quot;);</span><br><span class="line">    put(&quot;3&quot;, &quot;def&quot;);</span><br><span class="line">    put(&quot;4&quot;, &quot;ghi&quot;);</span><br><span class="line">    put(&quot;5&quot;, &quot;jkl&quot;);</span><br><span class="line">    put(&quot;6&quot;, &quot;mno&quot;);</span><br><span class="line">    put(&quot;7&quot;, &quot;pqrs&quot;);</span><br><span class="line">    put(&quot;8&quot;, &quot;tuv&quot;);</span><br><span class="line">    put(&quot;9&quot;, &quot;wxyz&quot;);</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"></span><br><span class="line">  List&lt;String&gt; output &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">  public void backtrack(String combination, String next_digits) &#123;</span><br><span class="line">    &#x2F;&#x2F; if there is no more digits to check</span><br><span class="line">    if (next_digits.length() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">      &#x2F;&#x2F; the combination is done</span><br><span class="line">      output.add(combination);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; if there are still digits to check</span><br><span class="line">    else &#123;</span><br><span class="line">      &#x2F;&#x2F; iterate over all letters which map</span><br><span class="line">      &#x2F;&#x2F; the next available digit</span><br><span class="line">      String digit &#x3D; next_digits.substring(0, 1);</span><br><span class="line">      String letters &#x3D; phone.get(digit);</span><br><span class="line">      for (int i &#x3D; 0; i &lt; letters.length(); i++) &#123;</span><br><span class="line">        String letter &#x3D; phone.get(digit).substring(i, i + 1);</span><br><span class="line">        &#x2F;&#x2F; append the current letter to the combination</span><br><span class="line">        &#x2F;&#x2F; and proceed to the next digits</span><br><span class="line">        &#x2F;&#x2F; letter往后一直移动是因为从a到b,b到c， c到d。。。这样</span><br><span class="line">        backtrack(combination + letter, next_digits.substring(1));</span><br><span class="line">        &#x2F;&#x2F; backtrack(letter + combination, next_digit.substring(1));</span><br><span class="line">&#x2F;&#x2F;Output [&quot;da&quot;,&quot;ea&quot;,&quot;fa&quot;,&quot;db&quot;,&quot;eb&quot;,&quot;fb&quot;,&quot;dc&quot;,&quot;ec&quot;,&quot;fc&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public List&lt;String&gt; letterCombinations(String digits) &#123;</span><br><span class="line">    if (digits.length() !&#x3D; 0)</span><br><span class="line">      backtrack(&quot;&quot;, digits);</span><br><span class="line">    return output;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q12 3 sum</title>
    <url>/2021/01/02/LeetCode-Q12-3-sum/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;1.Sort array</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        &#x2F;&#x2F;2. Creat a double Linkedlist</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line">        for(int i &#x3D; 0; i &lt; nums.length - 2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;3. if i &#x3D; 0 or the 2nd number is not equal to previous number</span><br><span class="line">            &#x2F;&#x2F;为了保证不加入重复的 list,因为是有序的，所以如果和前一个元素相同，只需要继续后移就可以</span><br><span class="line">            if(i &#x3D;&#x3D; 0 || (i &gt; 0 &amp;&amp; nums[i] !&#x3D; nums[i - 1]))</span><br><span class="line">            &#123;</span><br><span class="line">                 &#x2F;&#x2F;两个指针,并且头指针从i + 1开始，防止加入重复的元素</span><br><span class="line">                int lo &#x3D; i + 1, hi &#x3D; nums.length - 1, sum &#x3D; 0 - nums[i];</span><br><span class="line">                while(lo &lt; hi)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(nums[lo] + nums[hi] &#x3D;&#x3D; sum)</span><br><span class="line">                    &#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i], nums[lo], nums[hi]));</span><br><span class="line">                        while(lo &lt; hi &amp;&amp; nums[lo] &#x3D;&#x3D; nums[lo + 1]) lo++;</span><br><span class="line">                        while(lo &lt; hi &amp;&amp; nums[hi] &#x3D;&#x3D; nums[hi - 1]) hi--;</span><br><span class="line">                        lo++;</span><br><span class="line">                        hi--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if(nums[lo] + nums[hi] &lt; sum) lo++;</span><br><span class="line">                    else hi--;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q20 Valid Parentheses</title>
    <url>/2021/01/02/LeetCode-Q20-Valid-Parentheses/</url>
    <content><![CDATA[<p>括号匹配问题。<br>如果只有一种括号，我们完全可以用一个计数器 count ，遍历整个字符串，遇到左括号加 1 ，遇到右括号减 1，遍历结束后，如果 count 等于 0 ，则表示全部匹配。但如果有多种括号，像 ( [ ) ] 这种情况它依旧会得到 0，所以我们需要用其他的方法。</p>
<p>Stack！</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    public boolean isValid(String s)</span><br><span class="line">    &#123;</span><br><span class="line">        Stack&lt;Character&gt; brackets = new Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i = 0; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            char c = s.charAt(i);</span><br><span class="line">            switch(c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                brackets.push(c);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(!brackets.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(brackets.peek() == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            brackets.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(!brackets.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(brackets.peek() == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            brackets.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span>(!brackets.empty())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(brackets.peek() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            brackets.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> brackets.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q19 Remove Nth Node From End of List</title>
    <url>/2021/01/02/LeetCode-Q19-Remove-Nth-Node-From-End-of-List/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public ListNode removeNthFromEnd(ListNode head, int n)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;1. create a dummyHead before the real head</span><br><span class="line">        ListNode dummyHead &#x3D; new ListNode(0);</span><br><span class="line">        dummyHead.next &#x3D; head;</span><br><span class="line">        ListNode first &#x3D; head;</span><br><span class="line">        int length &#x3D; 0;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;as long as first is not null, we increase length</span><br><span class="line">        &#x2F;&#x2F;and keep moving first</span><br><span class="line">        while(first !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            length++;</span><br><span class="line">            first &#x3D; first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;use length - n to locate the node we are going to delete</span><br><span class="line">        length -&#x3D;n;</span><br><span class="line">        first &#x3D; dummyHead;</span><br><span class="line">        while(length &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            length--;</span><br><span class="line">            first &#x3D; first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        first.next &#x3D; first.next.next;</span><br><span class="line">        return dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q22 Generate Parentheses</title>
    <url>/2021/01/02/LeetCode-Q22-Generate%20Parentheses/</url>
    <content><![CDATA[<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<p>Example 1:</p>
<p>Input: n = 3<br>Output: [“((()))”,”(()())”,”(())()”,”()(())”,”()()()”]<br>Example 2:</p>
<p>Input: n = 1<br>Output: [“()”]</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution </span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;String&gt; generateParenthesis(int n)</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; ans &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        backtrack(ans, &quot;&quot;, 0, 0, n);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void backtrack(List&lt;String&gt; ans, String cur, int open, int close, int max)</span><br><span class="line">    &#123;</span><br><span class="line">        if(cur.length() &#x3D;&#x3D; max * 2)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        if(open &lt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            backtrack(ans, cur + &quot;(&quot;, open + 1, close, max);</span><br><span class="line">        &#125;</span><br><span class="line">        if(close &lt; open)</span><br><span class="line">        &#123;</span><br><span class="line">            backtrack(ans, cur + &quot;)&quot;, open, close + 1, max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q21 Merge Two Sorted Lists</title>
    <url>/2021/01/02/LeetCode-Q21-Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<p>Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.</p>
<p>Input: l1 = [1,2,4], l2 = [1,3,4]<br>Output: [1,1,2,3,4,4]<br>Example 2:</p>
<p>Input: l1 = [], l2 = []<br>Output: []<br>Example 3:</p>
<p>Input: l1 = [], l2 = [0]<br>Output: [0]</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution </span><br><span class="line">&#123;</span><br><span class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) </span><br><span class="line">    &#123;</span><br><span class="line">        if(l1 &#x3D;&#x3D; null) return l2;</span><br><span class="line">        if(l2 &#x3D;&#x3D; null) return l1;</span><br><span class="line">        </span><br><span class="line">        if(l1.val &lt; l2.val)</span><br><span class="line">        &#123;</span><br><span class="line">            l1.next &#x3D; mergeTwoLists(l1.next, l2);</span><br><span class="line">            return l1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            l2.next &#x3D; mergeTwoLists(l1, l2.next);</span><br><span class="line">            return l2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode Q5 Longest Palindromic Substring</title>
    <url>/2021/01/02/LeetCode-Q5-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public String longestPalindrome(String s)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s &#x3D;&#x3D; null || s.length() &lt; 1) return &quot;&quot;;</span><br><span class="line">        int start &#x3D; 0, end &#x3D; 0;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int len1 &#x3D; expandAroundCenter(s, i, i);</span><br><span class="line">            int len2 &#x3D; expandAroundCenter(s, i, i + 1);</span><br><span class="line">            int len &#x3D; Math.max(len1, len2);</span><br><span class="line">            if(len &gt; end - start)</span><br><span class="line">            &#123;</span><br><span class="line">                start &#x3D; i - (len-1)&#x2F;2;</span><br><span class="line">                end &#x3D; i + len&#x2F;2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return s.substring(start, end + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private int expandAroundCenter(String s, int left, int right)</span><br><span class="line">    &#123;</span><br><span class="line">        int L &#x3D; left, R &#x3D; right;</span><br><span class="line">        while(L &gt;&#x3D; 0 &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) &#x3D;&#x3D; s.charAt(R))</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        return R - L - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode Q1 Two Sum</title>
    <url>/2020/10/04/Leetcode%20Q1%20Two%20Sum/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target)</span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        for(int i &#x3D; 0; i &lt; nums.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int n &#x3D; target - nums[i];</span><br><span class="line">            if(map.containsKey(n))</span><br><span class="line">            &#123;</span><br><span class="line">                return new int[] &#123;map.get(n), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    throw new IllegalArgumentException(&quot;No two sum solution&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Q3 Longest Substring Without Repeating Characters</title>
    <url>/2021/01/01/Leetcode-Q3-Longest-Substring-Without-Repeating-Characters/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution </span><br><span class="line">&#123;</span><br><span class="line">    public int lengthOfLongestSubstring(String s) </span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; s: &quot;abcabcbb&quot;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Character, Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; s: &quot;abcabcbb&quot;</span><br><span class="line">           map: &#123;&#125; </span><br><span class="line">        </span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        &#x2F;&#x2F; s: &quot;abcabcbb&quot;</span><br><span class="line">           map: &#123;&#125;</span><br><span class="line">           ans: 0</span><br><span class="line">        </span><br><span class="line">        for(int i &#x3D; 0, j &#x3D; 0; j &lt; s.length(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        s: &quot;abcabcbb&quot;</span><br><span class="line">        map: &#123;&#125;</span><br><span class="line">        ans: 0</span><br><span class="line">        i: 0</span><br><span class="line">        j: 0</span><br><span class="line">        *&#x2F;</span><br><span class="line">            if(map.containsKey(s.charAt(j)))</span><br><span class="line">            &#123;</span><br><span class="line">                i &#x3D; Math.max(map.get(s.charAt(j)), i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans &#x3D; Math.max(ans, j - i + 1);</span><br><span class="line">            &#x2F;*</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&#125;</span><br><span class="line">            ans: 1</span><br><span class="line">            i: 0</span><br><span class="line">            j: 0</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">            map.put(s.charAt(j), j + 1);</span><br><span class="line">            &#x2F;*</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&quot;a&quot;:1&#125;</span><br><span class="line">            ans: 1</span><br><span class="line">            i: 0</span><br><span class="line">            j: 0</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">            &#x2F;*</span><br><span class="line">            Second round</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">            ans: 2</span><br><span class="line">            i: 0</span><br><span class="line">            j: 1</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">            &#x2F;*</span><br><span class="line">            s: &quot;abcabcbb&quot;</span><br><span class="line">            map: &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">            ans: 3</span><br><span class="line">            i: 0</span><br><span class="line">            j: 2</span><br><span class="line">            *&#x2F;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Q2 Add Two Numbers</title>
    <url>/2021/01/01/Leetcode%20Q2%20Add%20Two%20Numbers/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public ListNode addTwoNumbers(ListNode l1, ListNode l2)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;initiate new dummyHead, it points to first node</span><br><span class="line">        ListNode dummyHead &#x3D; new ListNode(0);</span><br><span class="line">        &#x2F;&#x2F;ListNode should have p, q, curr</span><br><span class="line">        ListNode p &#x3D; l1, q &#x3D; l2, curr &#x3D; dummyHead;</span><br><span class="line">        &#x2F;&#x2F;Initiate a carry value</span><br><span class="line">        int carry &#x3D; 0;</span><br><span class="line">        while(p !&#x3D; null || q !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            int x &#x3D; (p !&#x3D; null) ? p.val : 0;</span><br><span class="line">            int y &#x3D; (q !&#x3D; null) ? q.val : 0;</span><br><span class="line">            int sum &#x3D; x + y + carry;</span><br><span class="line">            &#x2F;&#x2F;re-value carry</span><br><span class="line">            carry &#x3D; sum &#x2F; 10;</span><br><span class="line">            &#x2F;&#x2F;curr next node is backward</span><br><span class="line">            curr.next &#x3D; new ListNode(sum % 10);</span><br><span class="line">            curr &#x3D; curr.next;</span><br><span class="line">            if(p !&#x3D; null) p &#x3D; p.next;</span><br><span class="line">            if(q !&#x3D; null) q &#x3D; q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(carry &gt; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            curr.next &#x3D; new ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        return dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Grammar / Web Delopyment</title>
    <url>/2020/10/04/hello-world/</url>
    <content><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Check <a href="https://hexo.io/docs/">documentation</a> for more info. </p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="Generate-with-Debugger"><a href="#Generate-with-Debugger" class="headerlink" title="Generate with Debugger"></a>Generate with Debugger</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="Frequently-Used-Color"><a href="#Frequently-Used-Color" class="headerlink" title="Frequently Used Color"></a>Frequently Used Color</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font size&#x3D;5 color&#x3D;&quot;#3cff00&quot;&gt; Set Color and Font&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>
<p><font size=5 color="#3cff00"> Set Color and Font</font><br><font size=5 color="#0048ff"> Set Color and Font</font><br><font size=5 color="#c800ff"> Set Color and Font</font><br><font size=5 color="#fc0303"> Set Color and Font</font></p>
<h3 id="Read-more-option"><a href="#Read-more-option" class="headerlink" title="Read more option"></a>Read more option</h3><p>Use <a id="more"></a> in the article to manually cut off article<br>According to the content of the article, this method can add <!--more--> tags in the appropriate position by yourself, which is flexible.</p>
<h3 id="Insert-images"><a href="#Insert-images" class="headerlink" title="Insert images"></a>Insert images</h3><p>Example:<br><img src="/images/jeremy-bishop-fhCD0DXhOUA-unsplash.jpg"></p>
<h3 id="Insert-web-links"><a href="#Insert-web-links" class="headerlink" title="Insert web links"></a>Insert web links</h3><p>[Instruction] (<a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a>)</p>
<p><strong>html version</strong><br><a href="https://yuelinus.com" target="_blank">Skara-Brae</a></p>
]]></content>
      <categories>
        <category>Web Note</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Singly LinkedList</title>
    <url>/2021/01/04/SinglyLinkedList/</url>
    <content><![CDATA[<p>Singly LinkedList 1</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">Singly LinkedList C++</span><br><span class="line">*&#x2F;</span><br><span class="line"> #include &lt;iostream&gt;</span><br><span class="line"> #include &lt;string&gt;</span><br><span class="line"> using namespace std;</span><br><span class="line"></span><br><span class="line"> typedef int ElementType;</span><br><span class="line"></span><br><span class="line"> class SLList</span><br><span class="line"> &#123;</span><br><span class="line"> public:</span><br><span class="line">     SLList();&#x2F;&#x2F;默认构造函数</span><br><span class="line">     SLList(const SLList&amp; from);&#x2F;&#x2F;复制构造函数</span><br><span class="line">     SLList&amp; operator &#x3D; (const SLList&amp; from);&#x2F;&#x2F;赋值操作符重载</span><br><span class="line">     ~SLList();&#x2F;&#x2F;析构函数</span><br><span class="line"> public:&#x2F;&#x2F;why separate</span><br><span class="line">     class SLNode</span><br><span class="line">     &#123;</span><br><span class="line">         friend class SLList;</span><br><span class="line">     private:</span><br><span class="line">         SLNode();</span><br><span class="line">         SLNode(const ElementType&amp; t);</span><br><span class="line">         ~SLNode();</span><br><span class="line">     public:</span><br><span class="line">         ElementType m_data;</span><br><span class="line">         SLNode* m_next;</span><br><span class="line">     &#125;;</span><br><span class="line"> public:&#x2F;&#x2F;成员函数</span><br><span class="line">     bool empty(void) const &#123; return m_size &#x3D;&#x3D; 0; &#125;&#x2F;&#x2F;判断链表是否为空</span><br><span class="line">     int size(void) const &#123; return m_size; &#125;&#x2F;&#x2F;返回链表元素的数量</span><br><span class="line">     const ElementType&amp; get_element(int i) const;&#x2F;&#x2F;获取链表的第i个元素(可能会抛异常)</span><br><span class="line">     ElementType&amp; get_element(int i);&#x2F;&#x2F;获取链表的第i个元素(可能会抛异常)</span><br><span class="line">     &#x2F;* 在第i个元素之前插入e(可能会抛异常)</span><br><span class="line">        拥有n个元素的链表可以插入的位置有n+1个：0, 1, ... , n</span><br><span class="line">        插入位置为n表示插入在最后一个元素之后</span><br><span class="line">     *&#x2F;</span><br><span class="line">     void insert(int i, const ElementType&amp; e);</span><br><span class="line">     &#x2F;* 查找某个元素是否存在，当发现第一个时就返回，所以返回SLNode*;</span><br><span class="line">        这个函数有3个作用:</span><br><span class="line">        1 查找元素是否存在；</span><br><span class="line">        2 读写元素；</span><br><span class="line">        3 相当于返回的是迭代器</span><br><span class="line">     *&#x2F;</span><br><span class="line">     SLNode* find(const ElementType&amp; e);</span><br><span class="line">     void delete_element(int i);&#x2F;&#x2F;删除第i个元素(可能会抛异常)</span><br><span class="line">     void clear(void);&#x2F;&#x2F;删除所有元素</span><br><span class="line"> private:</span><br><span class="line">     void copy(const SLList &amp; from);</span><br><span class="line"> private:</span><br><span class="line">     &#x2F;* 指向头节点，不存储元素；</span><br><span class="line">        next为空指针表示没有最后一个元素，也就是空链表;</span><br><span class="line">        方便代码编写</span><br><span class="line">     *&#x2F;</span><br><span class="line">     SLNode m_head;</span><br><span class="line">     int m_size;&#x2F;&#x2F;链表当前有多少个元素</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> SLList::SLNode::SLNode()</span><br><span class="line"> &#123;</span><br><span class="line">     m_next &#x3D; nullptr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SLList::SLNode::SLNode(const ElementType &amp;t)</span><br><span class="line"> &#123;</span><br><span class="line">     m_data &#x3D; t;</span><br><span class="line">     m_next &#x3D; nullptr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SLList::SLNode::~SLNode()</span><br><span class="line"> &#123;</span><br><span class="line">     m_next &#x3D; nullptr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> void SLList::insert(int i, const ElementType &amp;e)</span><br><span class="line"> &#123;</span><br><span class="line">     if(i &lt; 0 || i &gt; m_size)</span><br><span class="line">     &#123;</span><br><span class="line">         throw runtime_error(&quot;Out of Index&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         SLNode *p &#x3D; &amp;m_head;</span><br><span class="line">         int length &#x3D; 0;</span><br><span class="line">         while (length &lt; i &amp;&amp; p !&#x3D; nullptr)</span><br><span class="line">         &#123;</span><br><span class="line">             length++;</span><br><span class="line">             p &#x3D; p-&gt;m_next;</span><br><span class="line">         &#125;</span><br><span class="line">         SLNode *q &#x3D; new SLNode(e);</span><br><span class="line">         q-&gt;m_next &#x3D; p-&gt;m_next;</span><br><span class="line">         p-&gt;m_next &#x3D; q;</span><br><span class="line">         m_size++;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> void SLList::delete_element(int i)</span><br><span class="line"> &#123;</span><br><span class="line">     if(i &lt; 0 || i &gt;&#x3D; m_size)</span><br><span class="line">     &#123;</span><br><span class="line">         throw runtime_error(&quot;Out of Index&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         SLNode *p &#x3D; &amp;m_head;</span><br><span class="line">         int length &#x3D; 0;</span><br><span class="line">         while (length &lt; i &amp;&amp; p !&#x3D; nullptr)</span><br><span class="line">         &#123;</span><br><span class="line">             length++;</span><br><span class="line">             p &#x3D; p-&gt;m_next;</span><br><span class="line">         &#125;</span><br><span class="line">         SLNode *q &#x3D; p-&gt;m_next;</span><br><span class="line">         p-&gt;m_next &#x3D; q-&gt;m_next;</span><br><span class="line">         delete q;</span><br><span class="line">         m_size--;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SLList::SLList()</span><br><span class="line"> &#123;</span><br><span class="line">     m_size &#x3D; 0;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SLList::~SLList()</span><br><span class="line"> &#123;</span><br><span class="line">     &#x2F;&#x2F;clear();&#x2F;&#x2F;libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Out of Index</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> void SLList::copy(const SLList &amp;from)</span><br><span class="line"> &#123;</span><br><span class="line">     auto old &#x3D; &amp;from.m_head;</span><br><span class="line">     auto current &#x3D; &amp;m_head;</span><br><span class="line">     for(int i &#x3D; 0; i &lt; from.m_size; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         auto p &#x3D; new SLNode(old-&gt;m_next-&gt;m_data);</span><br><span class="line">         current-&gt;m_next &#x3D; p;</span><br><span class="line">         current &#x3D; p;</span><br><span class="line"></span><br><span class="line">         old &#x3D; old-&gt;m_next;</span><br><span class="line">     &#125;</span><br><span class="line">     m_size &#x3D; from.m_size;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> SLList::SLList(const SLList &amp;from)</span><br><span class="line"> &#123;</span><br><span class="line">     if(!from.empty())</span><br><span class="line">     &#123;</span><br><span class="line">         copy(from);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> const ElementType &amp;SLList::get_element(int i) const</span><br><span class="line"> &#123;</span><br><span class="line">     if(i &lt; 0 || i &gt; m_size)</span><br><span class="line">     &#123;</span><br><span class="line">         throw runtime_error(&quot;Out of Index&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     auto p &#x3D; &amp;m_head;</span><br><span class="line">     int length &#x3D; 0;</span><br><span class="line">     while(length &lt; i &amp;&amp; p !&#x3D; nullptr)</span><br><span class="line">     &#123;</span><br><span class="line">         length++;</span><br><span class="line">         p &#x3D; p-&gt;m_next;</span><br><span class="line">     &#125;</span><br><span class="line">     return p-&gt;m_next-&gt;m_data;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ElementType &amp;SLList::get_element(int i)</span><br><span class="line"> &#123;</span><br><span class="line">     if(i &lt; 0 || i &gt; m_size)</span><br><span class="line">     &#123;</span><br><span class="line">         throw runtime_error(&quot;Out of Index&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     auto p &#x3D; &amp;m_head;</span><br><span class="line">     int length &#x3D; 0;</span><br><span class="line">     while(length &lt; i &amp;&amp; p !&#x3D; nullptr)</span><br><span class="line">     &#123;</span><br><span class="line">         length++;</span><br><span class="line">         p &#x3D; p-&gt;m_next;</span><br><span class="line">     &#125;</span><br><span class="line">     return p-&gt;m_next-&gt;m_data;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SLList &amp;SLList::operator&#x3D;(const SLList &amp;from)</span><br><span class="line"> &#123;</span><br><span class="line">     std::cout &lt;&lt; &quot;SLListInt &amp; DLListInt::operator&#x3D;(const SLListInt &amp; from)\n&quot;;</span><br><span class="line">     if (this &#x3D;&#x3D; &amp;from)</span><br><span class="line">     &#123;</span><br><span class="line">         return *this;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         copy(from);</span><br><span class="line">         return *this;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> SLList::SLNode *SLList::find(const ElementType &amp;e)</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">     SLNode *p &#x3D; &amp;m_head;</span><br><span class="line">     while(p)</span><br><span class="line">     &#123;</span><br><span class="line">         if(p-&gt;m_data &#x3D;&#x3D; e)</span><br><span class="line">         &#123;</span><br><span class="line">             return p;</span><br><span class="line">         &#125;</span><br><span class="line">         p &#x3D; p-&gt;m_next;</span><br><span class="line">     &#125;</span><br><span class="line">     return nullptr;</span><br><span class="line"></span><br><span class="line">     &#x2F;*</span><br><span class="line">     SLNode *p &#x3D; &amp;m_head;</span><br><span class="line">     while(p-&gt;next)</span><br><span class="line">     &#123;</span><br><span class="line">         if(p-&gt;m_next-&gt;m_data &#x3D;&#x3D; e)</span><br><span class="line">         &#123;</span><br><span class="line">             return p-&gt;m_next;</span><br><span class="line">         &#125;</span><br><span class="line">         p &#x3D; p-&gt;m_next;</span><br><span class="line">     &#125;</span><br><span class="line">     return nullptr;</span><br><span class="line">      *&#x2F;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> void SLList::clear()</span><br><span class="line"> &#123;</span><br><span class="line">     SLNode *p &#x3D; &amp;m_head;</span><br><span class="line">     while(p)</span><br><span class="line">     &#123;</span><br><span class="line">         auto q &#x3D; p-&gt;m_next;</span><br><span class="line">         p &#x3D; q-&gt;m_next;</span><br><span class="line">         delete q;</span><br><span class="line">     &#125;</span><br><span class="line">     m_head.m_next &#x3D; nullptr;</span><br><span class="line">     m_size &#x3D; 0;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> void print_list(const SLList&amp; slist, const std::string&amp; msg)</span><br><span class="line"> &#123;</span><br><span class="line">     cout &lt;&lt; &quot;print &quot; &lt;&lt; msg &lt;&lt; &quot;:&quot;;</span><br><span class="line">     for (int i &#x3D; 0; i &lt; slist.size(); ++i)</span><br><span class="line">     &#123;</span><br><span class="line">         cout &lt;&lt; slist.get_element(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">     &#125;</span><br><span class="line">     cout &lt;&lt; &quot;\n&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> void Check(bool b)</span><br><span class="line"> &#123;</span><br><span class="line">     if (b)</span><br><span class="line">     &#123;</span><br><span class="line">         std::cout &lt;&lt; &quot;Pass&quot; &lt;&lt; std::endl;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         std::cout &lt;&lt; &quot;NOT Pass&quot; &lt;&lt; std::endl;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">         &#x2F;&#x2F;test empty&#x2F;size;</span><br><span class="line">         cout &lt;&lt; &quot;test empty&#x2F;size&quot; &lt;&lt; std::endl;</span><br><span class="line">         SLList slist;</span><br><span class="line">         Check(slist.size() &#x3D;&#x3D; 0);</span><br><span class="line">         Check(slist.empty());</span><br><span class="line">         slist.insert(0, 1);</span><br><span class="line">         Check(slist.size() &#x3D;&#x3D; 1);</span><br><span class="line">         Check(slist.empty() &#x3D;&#x3D; false);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">         &#x2F;&#x2F;test insert&#x2F;get_element&#x2F;find;</span><br><span class="line">         std::cout &lt;&lt; &quot;test insert&#x2F;get_element&#x2F;find&quot; &lt;&lt; std::endl;</span><br><span class="line">         SLList slist;</span><br><span class="line">         cout &lt;&lt; &quot;1&quot;;</span><br><span class="line">         Check(slist.size() &#x3D;&#x3D; 0);</span><br><span class="line">         cout &lt;&lt; &quot;2&quot;;</span><br><span class="line">         Check(slist.empty());</span><br><span class="line">         try</span><br><span class="line">         &#123;</span><br><span class="line">             slist.get_element(-1);</span><br><span class="line">         &#125;</span><br><span class="line">         catch (const std::exception&amp; e)</span><br><span class="line">         &#123;</span><br><span class="line">             std::cout&lt;&lt;&quot;Pass &quot; &lt;&lt; e.what() &lt;&lt; std::endl;</span><br><span class="line">         &#125;</span><br><span class="line">         cout &lt;&lt; &quot;3&quot;;</span><br><span class="line">         Check(slist.find(123) &#x3D;&#x3D; nullptr);</span><br><span class="line">         slist.insert(0, 123);</span><br><span class="line">         cout &lt;&lt; &quot;4&quot;;</span><br><span class="line">         Check(slist.find(123) &amp;&amp; slist.find(123)-&gt;m_data &#x3D;&#x3D; 123);</span><br><span class="line">         cout &lt;&lt; &quot;5&quot;;</span><br><span class="line">         Check(slist.size() &#x3D;&#x3D; 1);</span><br><span class="line">         cout &lt;&lt; &quot;6&quot;;</span><br><span class="line">         Check(slist.empty() &#x3D;&#x3D; false);</span><br><span class="line">         cout &lt;&lt; &quot;7&quot;;</span><br><span class="line">         Check(slist.get_element(0) &#x3D;&#x3D; 123);</span><br><span class="line">         slist.insert(1, 456);</span><br><span class="line">         cout &lt;&lt; &quot;8&quot;;</span><br><span class="line">         Check(slist.find(456) &amp;&amp; slist.find(456)-&gt;m_data &#x3D;&#x3D; 456);</span><br><span class="line">         cout &lt;&lt; &quot;9&quot;;</span><br><span class="line">         Check(slist.get_element(0) &#x3D;&#x3D; 123);</span><br><span class="line">         cout &lt;&lt; &quot;10&quot;;</span><br><span class="line">         Check(slist.get_element(1) &#x3D;&#x3D; 456);</span><br><span class="line">         cout &lt;&lt; &quot;11&quot;;</span><br><span class="line">         Check(slist.size() &#x3D;&#x3D; 2);</span><br><span class="line">         try</span><br><span class="line">         &#123;</span><br><span class="line">             slist.get_element(2);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         catch (const std::exception&amp; e)</span><br><span class="line">         &#123;</span><br><span class="line">             std::cout &lt;&lt; &quot;Pass &quot; &lt;&lt; e.what() &lt;&lt; std::endl;</span><br><span class="line">         &#125;</span><br><span class="line">         slist.get_element(1) &#x3D; 789;</span><br><span class="line">         cout &lt;&lt; &quot;12&quot;;</span><br><span class="line">         Check(slist.get_element(1) &#x3D;&#x3D; 789);</span><br><span class="line">         cout &lt;&lt; &quot;13&quot;;</span><br><span class="line">         Check(slist.find(789) &amp;&amp; slist.find(789)-&gt;m_data &#x3D;&#x3D; 789);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">         &#x2F;&#x2F;test delete_element;</span><br><span class="line">         std::cout &lt;&lt; &quot;test delete_element&quot; &lt;&lt; std::endl;</span><br><span class="line">         SLList slist;</span><br><span class="line">         try</span><br><span class="line">         &#123;</span><br><span class="line">             slist.delete_element(0);</span><br><span class="line">         &#125;</span><br><span class="line">         catch (const std::exception&amp; e)</span><br><span class="line">         &#123;</span><br><span class="line">             std::cout &lt;&lt; &quot;Pass &quot; &lt;&lt; e.what() &lt;&lt; std::endl;</span><br><span class="line">         &#125;</span><br><span class="line">         slist.insert(0, 123);</span><br><span class="line">         cout &lt;&lt; &quot;1&quot;;</span><br><span class="line">         Check(slist.find(123) &amp;&amp; slist.find(123)-&gt;m_data &#x3D;&#x3D; 123);</span><br><span class="line"></span><br><span class="line">         slist.delete_element(0);</span><br><span class="line">         cout &lt;&lt; &quot;2&quot;;</span><br><span class="line">         Check(slist.size() &#x3D;&#x3D; 0);</span><br><span class="line">         cout &lt;&lt; &quot;3&quot;;</span><br><span class="line">         Check(slist.empty());</span><br><span class="line"></span><br><span class="line">         slist.insert(0, 123);</span><br><span class="line">         slist.insert(1, 456);</span><br><span class="line">         slist.insert(2, 789);</span><br><span class="line">         slist.insert(3, 101112);</span><br><span class="line">         slist.insert(4, 131415);</span><br><span class="line">         print_list(slist, &quot;5个整数&quot;);</span><br><span class="line">         slist.delete_element(slist.size() - 1);</span><br><span class="line">         print_list(slist, &quot;删除最后一个，剩4个整数&quot;);</span><br><span class="line"></span><br><span class="line">         slist.delete_element(0);</span><br><span class="line">         print_list(slist, &quot;删除第1个，剩3个整数&quot;);</span><br><span class="line">         slist.delete_element(1);</span><br><span class="line">         print_list(slist, &quot;删除第2个，剩2个整数&quot;);</span><br><span class="line">         slist.delete_element(0);</span><br><span class="line">         slist.delete_element(0);</span><br><span class="line">         print_list(slist, &quot;全部删除后&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">         &#x2F;&#x2F;test clear;</span><br><span class="line">         std::cout &lt;&lt; &quot;test clear&quot; &lt;&lt; std::endl;</span><br><span class="line">         SLList slist;</span><br><span class="line">         slist.insert(0, 123);</span><br><span class="line">         slist.insert(1, 456);</span><br><span class="line">         slist.insert(2, 789);</span><br><span class="line">         slist.insert(3, 101112);</span><br><span class="line">         slist.insert(4, 131415);</span><br><span class="line">         print_list(slist, &quot;5个整数&quot;);</span><br><span class="line">         slist.clear();</span><br><span class="line">         print_list(slist, &quot;全部删除后&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">         &#x2F;&#x2F;test copy;</span><br><span class="line">         std::cout &lt;&lt; &quot;test copy&quot; &lt;&lt; std::endl;</span><br><span class="line">         SLList slist;</span><br><span class="line">         slist.insert(0, 123);</span><br><span class="line">         slist.insert(1, 456);</span><br><span class="line">         slist.insert(2, 789);</span><br><span class="line">         slist.insert(3, 101112);</span><br><span class="line">         slist.insert(4, 131415);</span><br><span class="line">         print_list(slist, &quot;slist 5个整数&quot;);</span><br><span class="line">         &#123;</span><br><span class="line">             SLList slist2(slist);</span><br><span class="line">             print_list(slist2, &quot;slist2 5个整数&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         &#123;</span><br><span class="line">             SLList slist3;</span><br><span class="line">             slist3 &#x3D; slist;</span><br><span class="line">             print_list(slist3, &quot;slist3 5个整数&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         slist.clear();</span><br><span class="line">         print_list(slist, &quot;全部删除后&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure and Algorithms</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>CSE 110 - 1</title>
    <url>/2021/01/09/CSE110-Assignment1/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><font size=5 color="#fc0303">Overview</font></h2><p>In this project we will write a program that will “fire” a cannonball at a mid-air target and determine if the cannonball hits the target or not. Five variables needed for this calculation will be provided by the user. Our program will do minor input validation on this input and will output the outcome of your calculations. See the diagram below for an example of what we are calculating.</p>
<a id="more"></a> 
<p><img src="/images/CSE110A1.jpg"></p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a><font size=5 color="#fc0303">Requirements</font></h2><p>Our program must do the following:</p>
<ol>
<li><p>Ask the user to provide the following values which you will store as a double, one at a time, with a proper message for each (ie. “Please type in the height”).</p>
<p> a. Velocity - The speed (in feet per second) at which the cannonball is fired.<br> b. Angle - The angle (in degrees) above the ground at which the cannonball is fired (this is called the inclination angle in the above diagram).<br> c. Distance - This is the horizontal distance (in feet) to the target (RH in the above diagram)<br> d. Elevation - The height (in feet) of the bottom of the target from the ground (y value on an x-y plane).<br> e. Size - This is how tall the target is from its bottom (elevation) to its top (elevation + size).</p>
</li>
<li><p>Validate the user’s input. One of the calculations you need to do requires division and we must ensure that the denominator of the equation is not 0.</p>
<p> a. Calculate (velocity * the cosine of angle in radians).<br> i. Use the Math class for cosine and converting to radians.<br> b. If that value if 0, print a message that the distance cannot be calculated with that input and do not continue. Otherwise, have the program continue to the next step.<br> i. That is, the rest of the program should be in an else block.</p>
</li>
<li><p>Calculate the time it takes the object to reach the distance.</p>
<p> a. The formula is (distance / (velocity * the cosine of angle in radians).</p>
</li>
<li><p>Calculate the height of the projectile at that distance.<br> a. The formula is (velocity * time * the sine of the angle in radians - ((32.17 * time squared) / 2))</p>
<pre><code> i. Again, use the math class for the sine and squaring time.
 ii. If you’re having trouble with this formula, try breaking it into smaller
 parts.</code></pre>
</li>
<li><p>Print the outcome of this cannonball shot.<br> a. There are four possible outcomes and you should print a proper message for each one.</p>
<pre><code> i. Height is less than 0: This means that the cannonball did not even reach the target.
 ii. Height is greater than 0 but less than the elevation of the target: This means the cannonball went under the target.
     (1) Print the height of the cannonball as part of your message.
 iii. Height is greater than elevation and less than elevation plus size: This means the cannonball hit the target!
 iv. Height is greater than elevation plus size: The cannonball went over the top of the target.
     (1) Print the height of the cannonball as part of your message.
     v. Note: I worded the above conditions similar to how you you might consider setting up your if, else-if, and else statements, but there are other, better, ways to organize this. Give it some thought.</code></pre>
</li>
</ol>
<h2 id="Example-Inputs"><a href="#Example-Inputs" class="headerlink" title="Example Inputs"></a><font size=5 color="#fc0303">Example Inputs</font></h2><p>Below are five example runs of the program with the inputs and outputs. Remember, the graders will be testing your program against these as well as their own, so make sure you test these and come up with your own before submitting your program.</p>
<p><font size=5>#1</font><br><font size=4>Please enter the velocity of the cannonball.</font><br><font size=3 color="#0048ff">5</font><br><font size=4>Please enter the angle the cannonball will be shot at.</font><br><font size=3 color="#0048ff">45</font><br><font size=4>Please enter the elevation of the bottom of the target.</font><br><font size=3 color="#0048ff">10</font><br><font size=4>Please enter the size of the target.</font><br><font size=3 color="#0048ff">7</font><br><font size=4>The cannonball did not make it to the target.</font></p>
<p><font size=5>#2</font><br><font size=4>Please enter the velocity of the cannonball.</font><br><font size=3 color="#0048ff">500</font><br><font size=4>Please enter the angle the cannonball will be shot at.</font><br><font size=3 color="#0048ff">20</font><br><font size=4>Please enter the distance to the target.</font><br><font size=3 color="#0048ff">12</font><br><font size=4>Please enter the elevation of the bottom of the target.</font><br><font size=3 color="#0048ff">3</font><br><font size=4>Please enter the size of the target.</font><br><font size=3 color="#0048ff">1</font><br><font size=4>The cannonball went over the target. Height at the target was 4.357150481812686</font></p>
<p><font size=5>#3</font><br><font size=4>Please enter the velocity of the cannonball.</font><br><font size=3 color="#0048ff">0</font><br><font size=4>Please enter the angle the cannonball will be shot at.</font><br><font size=3 color="#0048ff">50</font><br><font size=4>Please enter the distance to the target.</font><br><font size=3 color="#0048ff">29</font><br><font size=4>Please enter the elevation of the bottom of the target.</font><br><font size=3 color="#0048ff">46</font><br><font size=4>Please enter the size of the target.</font><br><font size=3 color="#0048ff">19</font><br><font size=4>The distance cannot be calculated with this input.</font></p>
<p><font size=5>#4</font><br><font size=4>Please enter the velocity of the cannonball.</font><br><font size=3 color="#0048ff">500</font><br><font size=4>Please enter the angle the cannonball will be shot at.</font><br><font size=3 color="#0048ff">45</font><br><font size=4>Please enter the distance to the target.</font><br><font size=3 color="#0048ff">5</font><br><font size=4>Please enter the elevation of the bottom of the target.</font><br><font size=3 color="#0048ff">2</font><br><font size=4>Please enter the size of the target.</font><br><font size=3 color="#0048ff">50</font><br><font size=4>The cannonball hit the target!.</font></p>
<p><font size=5>#5</font><br><font size=4>Please enter the velocity of the cannonball.</font><br><font size=3 color="#0048ff">100</font><br><font size=4>Please enter the angle the cannonball will be shot at.</font><br><font size=3 color="#0048ff">10</font><br><font size=4>Please enter the distance to the target.</font><br><font size=3 color="#0048ff">20</font><br><font size=4>Please enter the elevation of the bottom of the target.</font><br><font size=3 color="#0048ff">50</font><br><font size=4>Please enter the size of the target.</font><br><font size=3 color="#0048ff">1</font><br><font size=4>The cannonball went under the target. Height at the target was 2.8631355334347828</font></p>
<h2 id="Sample-Code"><a href="#Sample-Code" class="headerlink" title="Sample Code"></a>Sample Code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Assignment1</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[]args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner scan = new Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please enter the velocity of the cannonball&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        double velocity =scan.nextDouble();</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;Please enter the angle the cannonball will be shot at&quot;</span>);</span><br><span class="line">        double angle = scan.nextDouble();</span><br><span class="line">        double radians = Math.toRadians(angle);</span><br><span class="line">        double radcos = Math.cos(radians);</span><br><span class="line">        double radsin = Math.sin(radians);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Please enter the distance to the target&quot;</span>);</span><br><span class="line">        double distance = scan.nextDouble();</span><br><span class="line">        double time1 = (velocity * radcos);</span><br><span class="line">        double time2 = (distance/(velocity*radcos));</span><br><span class="line">        </span><br><span class="line">        double TimeSquare = Math.pow(time2, 2);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please enter the elevation of the bottom of the target&quot;</span>);</span><br><span class="line">        double elevation = scan.nextDouble();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Please enter the size of the target&quot;</span>);</span><br><span class="line">        double size = scan.nextDouble();</span><br><span class="line">        double height =((velocity*time2*radsin)-(32.17*time2*time2)/2);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (time1 == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The distance cannot be caculated with that input&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (height &lt; 0 )</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;the cannonball did not even reach the target&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (height &gt; 0 &amp;&amp; height &lt; elevation) </span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;the cannonball went under the target&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;the height is&quot;</span> + height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (height &gt; elevation &amp;&amp; height &lt; (elevation + size))</span><br><span class="line">        &#123; </span><br><span class="line">            System.out.println(<span class="string">&quot; the cannonball hit the target!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (height&gt;(elevation + size))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println( <span class="string">&quot;The cannonball went over the top of the target.Height is&quot;</span> + height );</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Principles of Programming</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q33 Search in Rotated Sorted Array</title>
    <url>/2021/01/09/LeetCode-Q33-Search-in-Rotated-Sorted-Array/</url>
    <content><![CDATA[<p>算法基于一个事实，数组从任意位置劈开后，至少有一半是有序的</p>
<p>比如 [ 4 5 6 7 1 2 3] ，从 7 劈开，左边是 [ 4 5 6 7] 右边是 [ 7 1 2 3]，左边是有序的。</p>
<p>我们可以先找到哪一段是有序的 (只要判断端点即可)，然后看 target 在不在这一段里，如果在，那么就把另一半丢弃。如果不在，那么就把这一段丢弃。</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public int search(int[] nums, int target) &#123;</span><br><span class="line">        int start = 0;</span><br><span class="line">        int end = nums.length - 1;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            int mid = (start + end) / 2;</span><br><span class="line">            <span class="keyword">if</span> (target == nums[mid]) &#123;</span><br><span class="line">                <span class="built_in">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            //左半段是有序的</span><br><span class="line">            <span class="keyword">if</span> (nums[start] &lt;= nums[mid]) &#123;</span><br><span class="line">                //target 在这段里</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[start] &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    end = mid - 1;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    start = mid + 1;</span><br><span class="line">                &#125;</span><br><span class="line">            //右半段是有序的</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[end]) &#123;</span><br><span class="line">                    start = mid + 1;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    end = mid - 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Info Assurance &amp; Security Lecture 1</title>
    <url>/2021/01/11/CSE543-Lecture1/</url>
    <content><![CDATA[<p>In this class, we cover comprehensive knowledge. Information assurance is not only cyber security, it also comtains management, operation. Information quality is also part of info assurance.</p>
<a id="more"></a>

<p>Compute science &amp; Computer engineering difference</p>
<ol>
<li>science is discovery of knowledge, including how to do things : integrate circuit</li>
<li>computer engineering is very broad, but based on network, embedded. CS cover software, algorithm, computation, data.</li>
</ol>
<p><strong>Interms of content, this two are close.</strong></p>
]]></content>
      <categories>
        <category>Info Assurance &amp; Security</category>
      </categories>
      <tags>
        <tag>CSE543</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Analysis and Design Lecture 1</title>
    <url>/2021/01/11/Software-Analysis-and-Design-Lecture-1/</url>
    <content><![CDATA[<h3 id="Course-Description"><a href="#Course-Description" class="headerlink" title="Course Description:"></a>Course Description:</h3><p>This course introduces requirements analysis and design, software architecture and software patterns, representations of software, formal methods, and component-based development.</p>
<a id="more"></a>

<p>Synchronous learning means <strong>live lectures</strong> with in-person instruction. Online course are recorded videos.</p>
<h3 id="Main-Topic"><a href="#Main-Topic" class="headerlink" title="Main Topic"></a>Main Topic</h3><ol>
<li>Requirements</li>
<li>Modeling or Design</li>
<li>Programming</li>
</ol>
]]></content>
      <categories>
        <category>Software Analysis and Design</category>
      </categories>
      <tags>
        <tag>CSE460</tag>
      </tags>
  </entry>
  <entry>
    <title>Multimedia Information Systems Lecture 1, 2</title>
    <url>/2021/01/12/CSE408-Lecture-1/</url>
    <content><![CDATA[<h3 id="About-CSE-408"><a href="#About-CSE-408" class="headerlink" title="About CSE 408"></a>About CSE 408</h3><p>Description: the course deals with the design, use, and applications of multimedia information systems. An introduction to acquisition, processing, compression, storage, retrieval, and presentation of data from different media types such as images, text, voice, graphics, and alphanumeric.<br>• Learning objectives: master fundamental concepts, specific domain knowledge, applications, and current research topics.</p>
<a id="more"></a>

<h3 id="Topics-To-Be-Covered"><a href="#Topics-To-Be-Covered" class="headerlink" title="Topics To Be Covered"></a>Topics To Be Covered</h3><p>• Introduction to multimedia systems<br>• Web search<br>• Natural language processing<br>• Sound informatics<br>• Image &amp; video<br>• Compression algorithms and standards (JPEG, MPEG)<br>• Multimedia Information System design<br>• Data mining and artificial intelligence<br>• Data visualization<br>• Computer vision algorithms and applications<br>• Multimedia Information System performance evaluation</p>
<h3 id="Multimedia-elements"><a href="#Multimedia-elements" class="headerlink" title="Multimedia elements"></a>Multimedia elements</h3><p>Audio -&gt; Video -&gt; Animation -&gt; Interactive -&gt; graphic -&gt; text</p>
<h2 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h2><p>Assumption 1: A hyperlink between pages denotes author perceived relevance (quality signal)</p>
<p>Assumption 2: The author of the hyperlink describes the target page (texual context)</p>
<p>Q: how hard is it go from one page to another?<br>Over 75% of the time there is no directed path from one ranfom web page to another</p>
<p>When a directed path exitsts, 16 clicks<br>When an undirected path exists its average 7 clicks</p>
<p><strong>six degree of separation</strong> 你和任何一个陌生人之间所间隔的人不会超过六个</p>
<h3 id="Information-retrieval"><a href="#Information-retrieval" class="headerlink" title="Information retrieval"></a>Information retrieval</h3><p><strong><em>Web search vs. Info retrieval</em></strong><br>• The scale of web search<br>• The web is very dynamic<br>•  The quality of web page is not uniform<br>•  Have to figure out which belong to the topic, range is wide</p>
<p>Theree types of queires<br>Navigational: Ex: Facebook. Simply look the place you want to reach<br>Informational: what is age of CLINTON? very specific<br>Transacational: search for commercial nature, Eg: gut insurance quote</p>
<p>There are more than 3.5M google searches every day<br>76% of global searches take place on google<br>60% are from mobile devices<br>80% of sarches were informational</p>
<h3 id="The-anatomy-of-a-large-scale-hypertexual-web-search-engine"><a href="#The-anatomy-of-a-large-scale-hypertexual-web-search-engine" class="headerlink" title="The anatomy of a large-scale hypertexual web search engine"></a>The anatomy of a large-scale hypertexual web search engine</h3><p>Web searching: architecture<br>• Web crawler: first algorithm<br>a way to collect large data</p>
<p>retireve the page, extract URL, update and repeat</p>
<p><strong>Indexing the web Goals: precision</strong><br>short queries applied to very large numbers of items leads to large number of hits</p>
<ul>
<li>goal is that the first 10-100 hits should satisify users</li>
<li>recall is not an important criterion</li>
</ul>
<p>completeness of index is not an important factot</p>
<p><strong>Concept of relevance and importance</strong><br>Relevance</p>
<ol>
<li>involved documents similarity between terms in the query and each document</li>
<li>location info, for use of proximity in multi-world search</li>
<li>in page title, page url important</li>
<li>font, color also considerd</li>
</ol>
<p>Importance: measures documents by their likelihood of being useful to a variety of users. popularity.</p>
<p><strong>Inverted index</strong><br>• For each word: set of documents where it occurs<br>Take popular word in documents as a term</p>
<h3 id="page-rank-algorithm"><a href="#page-rank-algorithm" class="headerlink" title="page rank algorithm"></a>page rank algorithm</h3><p>Used to estimate popularity of documents<br>if doc has more links to it, then more findable it is.</p>
<p><strong>Intuitive model</strong><br>A user:</p>
<ol>
<li>starts at a random page on the web</li>
<li>select random hyperlink from current page and jumps to the corresponding page</li>
<li>repeat step 2 at a very large number of times.</li>
</ol>
<p>page are ranked according to the relative frequency with which they are visted </p>
<p><strong>Basic algorithm</strong><br>• Matrix Representation<br>• Normalize by number of links from page<br>• weighting pages- initally all pages 1/n, recalculate weights<br>• iterate</p>
<p>Random teleports<br>The google solution for spider traps</p>
<p><strong>SIngle word query ranking</strong><br>• Assign weights</p>
<p><strong>Multi-word query ranking</strong><br>Similar to single word but have to use proximity on the document</p>
]]></content>
      <categories>
        <category>Multimedia Information Systems</category>
      </categories>
      <tags>
        <tag>CSE408</tag>
      </tags>
  </entry>
  <entry>
    <title>Java basic 1</title>
    <url>/2021/01/11/Java-basic-1/</url>
    <content><![CDATA[<h3 id="Array-copy"><a href="#Array-copy" class="headerlink" title="Array copy"></a>Array copy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int[] array1, array2;</span><br><span class="line">array1 = new int[] &#123;2,3,5,7,8,9,12,11,10&#125;;</span><br><span class="line"></span><br><span class="line">//copy array1 to array2</span><br><span class="line">array2 = new int[array1.length];</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; array2.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    array2[i] = array1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们通过new的方式，给array2在heap空间中开辟了新的数组空间，将array1数组的元素值一个个的copy进array2里</p>
<h3 id="Swap-array"><a href="#Swap-array" class="headerlink" title="Swap array"></a>Swap array</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; arr.length / 2; i++)</span><br><span class="line">&#123;</span><br><span class="line">    String temp = arr[i];</span><br><span class="line">    arr[i] = arr[arr.length - i - 1];</span><br><span class="line">    arr[arr.length - i - 1] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="Search-elements-in-an-array"><a href="#Search-elements-in-an-array" class="headerlink" title="Search elements in an array"></a>Search elements in an array</h3><ol>
<li>linear search: 通过遍历的方式，一个一个的对比查找，具有普遍适用性</li>
<li>binary search:<br> 每次比较中间值，&lt; nums[mid] 找左边。数组必须有序</li>
</ol>
<h3 id="Sorting-algorithms"><a href="#Sorting-algorithms" class="headerlink" title="Sorting algorithms"></a>Sorting algorithms</h3><ol>
<li>Selection sort <strong>O(n^2)</strong></li>
<li>Bubble sort <strong>O(n^2)</strong></li>
<li>Quick sort <strong>O(nlogn)</strong></li>
<li>Insertion sort <strong>O(n^2)</strong></li>
<li>Merge sort <strong>O(nlogn)</strong></li>
<li>Heap sort <strong>O(nlogn)</strong></li>
</ol>
<p>Time complexity, space compelxity are two of the most important keys</p>
<p>外部排序需要借助disk</p>
<h3 id="Bubble-sort"><a href="#Bubble-sort" class="headerlink" title="Bubble sort"></a>Bubble sort</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; arr.length - 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(int j = 0; j &lt; arr.length - 1 - i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j + 1])</span><br><span class="line">        &#123;</span><br><span class="line">            int temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + 1];</span><br><span class="line">            arr[j + 1] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ol>
<li>using java util package</li>
<li>Arrays: 提供了 很多操作数组的方法</li>
</ol>
<h3 id="Procedure-oriented-amp-Objected-oriented"><a href="#Procedure-oriented-amp-Objected-oriented" class="headerlink" title="Procedure-oriented &amp; Objected-oriented"></a>Procedure-oriented &amp; Objected-oriented</h3><p>Procedure-oriented: 强调功能行为，以函数为最小单位，考虑怎么做</p>
<ol>
<li>把冰箱门打开</li>
<li>抬起大象，塞进冰箱</li>
<li>关冰箱门</li>
</ol>
<p>Objected-oriented:<br>具备了功能的对象，以class/object为单位，考虑谁来做</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">person</span><br><span class="line">&#123;</span><br><span class="line">     new fridge()</span><br><span class="line">     &#123;</span><br><span class="line">        fridge.open()</span><br><span class="line">     &#123;</span><br><span class="line">     </span><br><span class="line">     new elephant()</span><br><span class="line">     &#123;</span><br><span class="line">        elephant.enter();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fridge</span><br><span class="line">&#123;</span><br><span class="line">    open();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">elephant</span><br><span class="line">&#123;</span><br><span class="line">    enter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OOP可以在现有的基础之上直接改class，但是POP要深入到程序里改。大项目里OOP优势明显。</p>
<h3 id="OOP-three-features"><a href="#OOP-three-features" class="headerlink" title="OOP three features"></a>OOP three features</h3><ol>
<li>Encapsulation</li>
<li>Inheritance</li>
<li>Polymorphism</li>
</ol>
<h3 id="OOP-concepts"><a href="#OOP-concepts" class="headerlink" title="OOP concepts"></a>OOP concepts</h3><p>Class and Object is the Key concept of OOP</p>
<p>Class: 抽象的，概念上的定义<br>Object: 实际存在的个体，so called instance<br>面向对象的程序设计的重点是object的设计，<br>设计object, 就是设计Object的成员</p>
<h3 id="OOP-program"><a href="#OOP-program" class="headerlink" title="OOP program"></a>OOP program</h3><ol>
<li><p>创建class，设计class的成员</p>
</li>
<li><p>创建class的object</p>
</li>
<li><p>Call object.filed OR object.methods 调用Object的结构</p>
</li>
<li><p>如果创建了一个class的多个object，每个object都有独立的一个class field（non- static) 如果我们修改一个对象的field a，不影响另外一个object的field. 除非我们让两个object指向heap里的同一个区域, 那么更改其中一个，另一个也会改变。</p>
</li>
<li><p>Heap 存放 Object instantiation<br> Stack 存放 Local variable</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class PersonTest</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        //创建person类的对象 = 类的实例化</span><br><span class="line">        //每new一个object，heap里就多一个空间</span><br><span class="line">        Person p1 = new Person();</span><br><span class="line">        </span><br><span class="line">        //call object: object.field</span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.isMale = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        //call methods: object.method</span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep();</span><br><span class="line">        p1.talk(<span class="string">&quot;English&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        //**********************************</span><br><span class="line">        Person p2 = new Person();</span><br><span class="line">        System.out.println(p2.name); //null</span><br><span class="line">        System.out.println(p2.isMale); //<span class="literal">false</span> </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //**********************************</span><br><span class="line">        //将P1变量保存的obejct address给p3，导致p1和p3指向了heap里的同一个block</span><br><span class="line">        Person p3 = p1;</span><br><span class="line">        System.out.println(p3.name); //Tom</span><br><span class="line">        </span><br><span class="line">        p3.age = 10;</span><br><span class="line">        System.out.println(p1.age); //10 </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    //属性 -&gt; field</span><br><span class="line">    String name;</span><br><span class="line">    int age = 1; //可以赋值也可以不赋值</span><br><span class="line">    boolean isMale;//default is <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    //方法 -&gt; method</span><br><span class="line">    public void eat()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;People eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void sleep()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;People sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void talk(String language)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;People talk,</span></span><br><span class="line"><span class="string">        by speaking &quot;</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Object-memory-analysis"><a href="#Object-memory-analysis" class="headerlink" title="Object memory analysis"></a>Object memory analysis</h3><p>Person p1 = new Person();  <strong>new memory in heap</strong><br>p1.name = “Tom”;<br><strong>The variable in methods are all local variable</strong><br>p1.isMale = true; </p>
<p>Person p2 = new Person();<br>System.out.println(p2.name);<br>Person p3 = p1;<br>p3.age = 10;</p>
<p><strong><em>stack</em></strong> p1 0x12b<br>                        –&gt; p2 0x778<br>                   p3 0x12b     </p>
<p><strong><em>heap</em></strong><br>name: null -&gt; “Tom”<br>                 age: 1<br>                 isMale: false -&gt; “true”<br>    –&gt;P2 name: null<br>            age: 1<br>            isMale: false</p>
<h3 id="Call-Field-in-Object"><a href="#Call-Field-in-Object" class="headerlink" title="Call Field in Object"></a>Call Field in Object</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// member variable VS <span class="built_in">local</span> variable</span><br><span class="line">1.相同点：</span><br><span class="line">    1.1 定义variable的格式，data <span class="built_in">type</span>， variable name</span><br><span class="line">    1.2 先声明，后使用</span><br><span class="line">    1.3 都有scope</span><br><span class="line"></span><br><span class="line">2.不同点：</span><br><span class="line">    2.1 在class中intialize的位置不同</span><br><span class="line">    field: 直接定义在class的一对&#123;&#125;里</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">local</span> variable: 在method内，method arguments， constructor arguments, variable inside constructor 都是<span class="built_in">local</span> variable出现的位置</span><br><span class="line">    </span><br><span class="line">    2.2 Access modifiers</span><br><span class="line">    member variable 可以在声明时，指明权限</span><br><span class="line">    常用的access modifiers</span><br><span class="line">    private, public, protected, default</span><br><span class="line">    </span><br><span class="line">    2.3 Default values</span><br><span class="line">    (byte, short, int, long): 0</span><br><span class="line">    (<span class="built_in">float</span>, double) 0.0</span><br><span class="line">    (char) 0 (or <span class="string">&#x27;\u0000&#x27;</span>)</span><br><span class="line">    (boolean), <span class="literal">false</span></span><br><span class="line">    reference data <span class="built_in">type</span>: null</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    // 2.1 field OR member variable OR instance variable</span><br><span class="line">    </span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line">    bool isMale;</span><br><span class="line">    </span><br><span class="line">    // language is an arguments</span><br><span class="line">    //所以是<span class="built_in">local</span> variable</span><br><span class="line">    public void talk(String language)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;We use &quot;</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void eat()</span><br><span class="line">    &#123;</span><br><span class="line">        //定义在method内的variable，是<span class="built_in">local</span> variable</span><br><span class="line">        //不能加public 或者 private</span><br><span class="line">        //因为是<span class="built_in">local</span> variable，方法是public，里面的<span class="built_in">local</span> variable就也是public了</span><br><span class="line">        String food = <span class="string">&quot;taco&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;We like &quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Access-modifiers"><a href="#Access-modifiers" class="headerlink" title="Access modifiers"></a>Access modifiers</h3><p>member variable 可以在声明时，指明权限<br>常用的access modifiers<br>private, public, protected, default<br>*(Encapsulation)*</p>
<p>Local variable cannot use access modifier</p>
]]></content>
      <categories>
        <category>Java Basic</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Analysis and Design Lecture 2</title>
    <url>/2021/01/11/CSE460-Lecture2/</url>
    <content><![CDATA[<h3 id="Blueprint"><a href="#Blueprint" class="headerlink" title="Blueprint"></a>Blueprint</h3><p>A graphic description to create a <strong>specification</strong></p>
<h3 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h3><ol>
<li><p>Size: The number of components<br>tree: 3 lines of code, but more complexity<br>bubble sort: 10 lines of code</p>
</li>
<li><p>Abstraction<br>what is behind code? Eg: tree has less code but harder</p>
</li>
</ol>
<h3 id="Problem-with-complexity"><a href="#Problem-with-complexity" class="headerlink" title="Problem with complexity"></a>Problem with complexity</h3><ol>
<li><p>the more <strong>complex</strong> the system, the more open it is to total <strong>breakdown</strong>.</p>
<pre><code> breakdown because of lack of -&gt; skill
                                                   -&gt; communication</code></pre>
</li>
<li><p>software crisis: <strong>late</strong>, over <strong>budget</strong>, deficient satisfying requirements</p>
</li>
</ol>
<p>Prototype, 1 person, limited purpose and short life span<br>Reuse, modify, extend software if needed, but don’t do in prototype</p>
<h3 id="chanllenges"><a href="#chanllenges" class="headerlink" title="chanllenges"></a>chanllenges</h3><p><strong>Communication gap</strong> between the users and developers<br><strong>Trade-off</strong>: competing, contradictory, requirements<br><strong>Quality</strong>: usability, reliability, performance, cost</p>
<p>Be a teammate or leader, one of the main responsibility<br>Management: keep the issusion of <strong>Simplicity</strong></p>
<p>maximum number of <strong>chunks of information</strong>. 7 +- 2 things you can think in your brain at the same time</p>
<h3 id="User-stories-amp-Use-cases"><a href="#User-stories-amp-Use-cases" class="headerlink" title="User stories &amp; Use cases"></a>User stories &amp; Use cases</h3><p><em>Independent</em> - loosely coupled with one another<br><em>Negotiable</em> - stories are what and why, not how<br><em>Value</em> - for the customer<br><em>Estimate</em> - effort.cost of design, build, test<br><em>Small</em> (size appropriately) 1 programmer and 1 week<br><em>Testable</em> - pass or fail</p>
<p>“I want a pacman videogame” is <strong>Not</strong> a requirement</p>
<p>Requirement:</p>
<p><strong>Functional Requirement</strong></p>
<ol>
<li>Draw pacman   </li>
<li>Move pacman   </li>
</ol>
<p>Quality &amp; Constraint is <strong>Non Functional Requirement</strong></p>
<ol>
<li>Use java to develop game</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Pacman</span><br><span class="line">&#123;</span><br><span class="line">    void paintComponent(graphic)</span><br><span class="line">    &#123;</span><br><span class="line">        g.drawOval(x,y,10)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span> x();</span><br><span class="line">    <span class="built_in">set</span> y();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ____</span><br><span class="line">    m() ____x y</span><br><span class="line">&#123;    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Q: How many requirements approximately in pacman video games<br>A: 25 - 50 requirements<br>If less than 25, may be some lines need to be split. If combine two tasks, means we need 2 people to do, but 1 requirement only need 1 person.</p>
]]></content>
      <categories>
        <category>Software Analysis and Design</category>
      </categories>
      <tags>
        <tag>CSE460</tag>
      </tags>
  </entry>
  <entry>
    <title>Info Assurance &amp; Security Lecture 2</title>
    <url>/2021/01/13/CSE543-Lecture2/</url>
    <content><![CDATA[<h3 id="Project-Guidelines"><a href="#Project-Guidelines" class="headerlink" title="Project Guidelines"></a>Project Guidelines</h3><ol>
<li><p>Project title [8-20 words]<br>(indicate what’s in the paper)</p>
</li>
<li><p>one week to read papers, one week to finialize </p>
</li>
<li><p>No more than 10% internet paper, they were not been peer reviewed</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Info Assurance &amp; Security</category>
      </categories>
      <tags>
        <tag>CSE543</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q34 Find First and Last Position of Element in Sorted Array</title>
    <url>/2021/01/14/LeetCode-Q34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
    <content><![CDATA[<p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p>
<p>If target is not found in the array, return [-1, -1].</p>
<p>Example 1:</p>
<p>Input: nums = [5,7,7,8,8,10], target = 8<br>Output: [3,4]<br>Example 2:</p>
<p>Input: nums = [5,7,7,8,8,10], target = 6<br>Output: [-1,-1]<br>Example 3:</p>
<p>Input: nums = [], target = 0<br>Output: [-1,-1]</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public int[] searchRange(int[] nums, int target)</span><br><span class="line">    &#123;</span><br><span class="line">        int start = 0;</span><br><span class="line">        int end = nums.length - 1;</span><br><span class="line">        int[] ans = &#123;-1, -1&#125;;</span><br><span class="line">        //<span class="built_in">test</span> <span class="keyword">case</span> is &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid = (start + end) / 2;</span><br><span class="line">            <span class="keyword">if</span>(target == nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                //丢弃右边</span><br><span class="line">                end = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                end = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                start = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //考虑 tartget 是否存在，判断我们要找的值是否等于 target 并且是否越界</span><br><span class="line">        // <span class="keyword">if</span> target existed, nums[start] == target</span><br><span class="line">        <span class="keyword">if</span>(start == nums.length || nums[start] != target)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[0] = start;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[0] = start;</span><br><span class="line">        start = 0;</span><br><span class="line">        end = nums.length - 1;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= end)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid = (start + end) / 2;</span><br><span class="line">            <span class="keyword">if</span>(target == nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                //丢弃左边</span><br><span class="line">                start = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                end = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                start = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[1] = end;</span><br><span class="line">        <span class="built_in">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q46 Permutations</title>
    <url>/2021/01/14/LeetCode-Q46-Permutations/</url>
    <content><![CDATA[<p>Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.</p>
<p>Example 1:</p>
<p>Input: nums = [1,2,3]<br>Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums)</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        backtrack(list, new ArrayList&lt;&gt;(), nums);</span><br><span class="line">        <span class="built_in">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void backtrack(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, int[] nums)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tempList.size() == nums.length)</span><br><span class="line">        &#123;</span><br><span class="line">            list.add(new ArrayList&lt;&gt;(tempList));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(int i = 0; i &lt; nums.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                //跳过已经存在的元素</span><br><span class="line">                <span class="keyword">if</span>(tempList.contains(nums[i])) <span class="built_in">continue</span>;</span><br><span class="line">                //将当前元素加入</span><br><span class="line">                tempList.add(nums[i]);</span><br><span class="line">                //向后继续添加</span><br><span class="line">                backtrack(list, tempList, nums);</span><br><span class="line">                //将 tempList 刚添加的元素，去掉，尝试新的元素</span><br><span class="line">                //每次超出<span class="keyword">for</span> loop的循环或者size == nums.length时都会运行此行，so called backtrack</span><br><span class="line">                tempList.remove(tempList.size() - 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q39 Combination Sum</title>
    <url>/2021/01/14/LeetCode-Q39-Combination-Sum/</url>
    <content><![CDATA[<p>Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.</p>
<p>The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p>
<p>It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.</p>
<a id="more"></a>


<p>Example 1:</p>
<p>Input: candidates = [2,3,6,7], target = 7<br>Output: [[2,2,3],[7]]<br>Explanation:<br>2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.<br>7 is a candidate, and 7 = 7.<br>These are the only two combinations.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] nums, int target)</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        backtrack(list, new ArrayList&lt;&gt;(), nums, target, 0);</span><br><span class="line">        <span class="built_in">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private void backtrack(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, int [] nums, int remain, int start)&#123;</span><br><span class="line">    <span class="keyword">if</span>(remain &lt; 0) <span class="built_in">return</span>; //1st round: remain is target</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(remain == 0) list.add(new ArrayList&lt;&gt;(tempList));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = start; i &lt; nums.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tempList.add(nums[i]);</span><br><span class="line">            backtrack(list, tempList, nums, remain - nums[i], i);</span><br><span class="line">            //找到了一个解或者 remain &lt; 0 了，将当前数字移除，然后继续尝试</span><br><span class="line">            tempList.remove(tempList.size() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB basic</title>
    <url>/2021/01/14/MATLAB-basic/</url>
    <content><![CDATA[<p><strong>What is Matlab?</strong><br>Matlab Screen<br>Variables, array, matrix, indexing Operators (Arithmetic, relational, logical ) Display Facilities<br>Flow Control<br>Using of M-File<br>Writing User Defined Functions Conclusion</p>
<a id="more"></a>

<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><ul>
<li><p>No need for types. i.e.<br><del>int a;</del><br><del>double b;</del><br><del>float c;</del></p>
</li>
<li><p>All variables are created with double precision unless specified and they are matrices.<br>Example:<br>x=5;<br>x1=2;</p>
</li>
</ul>
<p>a vector </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x = [1 2 5 1]</span><br></pre></td></tr></table></figure>

<p>x=<br>1 2 5 1 <em>不加分号， 按下回车就输出</em></p>
<p>a matrix<br>x = [1 2 3; 5 1 4; 3 2 -1]; <em>If you include “;” at the end of each statement, result will not be shown immediately</em></p>
<h3 id="long-array-matrix"><a href="#long-array-matrix" class="headerlink" title="long array, matrix"></a>long array, matrix</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">t =1:10</span><br></pre></td></tr></table></figure>
<p>t=<br>1 2 3 4 5 6 7 8 9 10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">t = 2: -0.5: -1</span><br></pre></td></tr></table></figure>

<p>t =<br>2.0000    1.5000    1.0000    0.5000         0   -0.5000   -1.0000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">t = [1:4; 5:8]</span><br></pre></td></tr></table></figure>
<p>x=    1  2  3  4<br>        5  6  7  8</p>
<h3 id="Generating-Vectors-from-functions"><a href="#Generating-Vectors-from-functions" class="headerlink" title="Generating Vectors from functions"></a>Generating Vectors from functions</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x = zeros(1,3) </span><br></pre></td></tr></table></figure>
<p>x=<br>    0  0  0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x = ones(1,3) </span><br></pre></td></tr></table></figure>
<p>x=<br>     1  1  1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x = rand(1,3) </span><br></pre></td></tr></table></figure>
<p>ouput: 1 column 3 numbers<br>x=<br>    0.9501, 0.2345, 0.3044    </p>
<h3 id="Concatenation-of-Matrices"><a href="#Concatenation-of-Matrices" class="headerlink" title="Concatenation of Matrices"></a>Concatenation of Matrices</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; [1 2], y &#x3D; [4 5], z&#x3D;c[0 0]</span><br></pre></td></tr></table></figure>

<p>A = [x  y]<br>1  2  4  5<br>B = [x ; y]<br>1  2<br>4  5</p>
<h3 id="operand"><a href="#operand" class="headerlink" title="operand"></a>operand</h3><p><strong>.*</strong> element-by-element multiplication<br><strong>./</strong> element-by-element division<br><strong>.^</strong> element-by-element power</p>
<p>== Equal to<br>~= Not equal to<br>&lt; Strictly smaller<br>__&gt;__ Strictly greater<br>&lt;= Smaller than or equal to &gt;= Greater than equal to<br>&amp; And operator<br>| Or operator</p>
<p>i.e.<br>Plot the function e-x/3sin(x) between 0≤x≤4π</p>
<ul>
<li><p>Create an x-array of 100 samples between 0 and 4π</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; linspace(0, 4*pi, 100);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate sin(.) of the x-array</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y &#x3D; sin(x);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate e-x/3 of the x-array</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y1 &#x3D; exp(-x&#x2F;3);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Multiply the arrays y and y1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y2 &#x3D; y .* y1;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>Plot the y2-array</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plot(y2);</span><br></pre></td></tr></table></figure>

<p><strong>Display facilities</strong></p>
<p>plot(y)<br>stem(y)<br>title(‘This is the sinus function’)<br>xlabel(‘x (secs)’)<br>ylabel(‘sin(x)’)</p>
<h3 id="Control-Structures"><a href="#Control-Structures" class="headerlink" title="Control Structures"></a>Control Structures</h3><p>Output 1-200, the difference between each number is 3 i.e 1,4,7,10,13,16…..</p>
<p><strong>For loop</strong><br>for i=Index_Array<br>    Matlab Commands;<br>end</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for j&#x3D;1:3:200</span><br><span class="line">display(j);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><strong>check if the number is even</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i &#x3D; 1:10</span><br><span class="line">if mod(x(i),2) &#x3D;&#x3D; 0</span><br><span class="line">y(i) &#x3D; 1;</span><br><span class="line">else</span><br><span class="line">y(i) &#x3D; 0;</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><strong>Calculate sum that can be divided by 3 in first 10 numbers</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; 0;</span><br><span class="line">&gt;&gt; for i &#x3D; 1:10</span><br><span class="line">if mod(x(i),3) &#x3D;&#x3D; 0</span><br><span class="line">s &#x3D; s + x(i);</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p><strong>Print all numbers until find 8</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">**while loop**</span><br><span class="line"></span><br><span class="line">while (condition) </span><br><span class="line">    Matlab Commands;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>while ((a&gt;3) &amp; (b==5))<br>    Some Matlab Commands;<br>end</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Function**</span><br><span class="line"></span><br><span class="line">After write this function, run the program, MATLAB will ask you to input. Rember the function name must match the file name.</span><br></pre></td></tr></table></figure>
<p>function out = squarer2(A, ind)<br>if(ind == 1)<br>    out = A^2;<br>elseif (ind == 2)<br>    out = A.^2;<br>end</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">check if a number is even, if even returns 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>function y = is_even(x)</p>
<p>y = mod(x, 2);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### strcmp, strfind, fgetl</span><br><span class="line"></span><br><span class="line">- tf &#x3D; strcmp(s1,s2) compares s1 and s2 and returns 1 (true) if the two are identical. Otherwise, strcmp returns 0 (false). Text is considered identical if the size and content of each are the same. The return result, tf, is of data type logical.</span><br><span class="line"></span><br><span class="line">- k &#x3D; strfind(str,pattern) searches str for occurrences of pattern. The output, k, indicates the starting index of each occurrence of pattern in str. If pattern is not found, then strfind returns an empty array, []. The strfind function executes a case-sensitive search.</span><br><span class="line"></span><br><span class="line">- tline &#x3D; fgetl(fileID) returns the next line of the specified file, removing the newline characters. fileID is an integer file identifier obtained from fopen. tline is a text string unless the line contains only the end-of-file marker. In this case, tline is the numeric value -1.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Struct</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>my_struct.name = ‘My new struct’<br>my_struct.age = 25</p>
<p>class(my_struct.name)  –&gt; char<br>class(my_struct.age)   –&gt; double<br>isfield(my_struct, ‘name’) –&gt; 1, because there is a name in struct</p>
<p>rmfield(my_struct, ‘age’) –&gt;remove age<br>setfield(my_struct, ‘gender’, f)  –&gt; gender: ‘f’</p>
<p>my_struct.contact.phone = 123456<br>my_struct.contact.email = person@gmail</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my_struct &#x3D; </span><br><span class="line">        name: &#39;My new struct&#39;</span><br><span class="line"></span><br><span class="line">ans &#x3D; </span><br><span class="line">            name: &#39;My new struct&#39;</span><br><span class="line">            age: 25</span><br><span class="line">            gender: &#39;f&#39;</span><br><span class="line"></span><br><span class="line">my_struct.contact</span><br><span class="line">ans &#x3D;   </span><br><span class="line">            phone: 123456</span><br><span class="line">            email: &#39;person@gmail.com&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**Altenative way**</span><br></pre></td></tr></table></figure>
<p>S = struct(‘name’, ‘Bob’, ‘email’, ‘bob@gmail.com’)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S &#x3D;     </span><br><span class="line">        name: &#39;Bob&#39;</span><br><span class="line">        email: &#39;bob@gmail.com&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>my_cell{1} = ‘hello world’  –&gt; call mycell, it simply print hello world</p>
<p>my_cell{‘A’} = {1 2; 3 4}; -&gt; 2*2 matrix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Plot Data</span><br><span class="line"></span><br><span class="line">**Plot Fibonacci**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>y = [1,1,2,3,5,8,13,21]<br>x = [0.1,0.2,0.3,0.4,0.5,0.6,0.7]<br>plot(y)<br>plot(x, y)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Plot sin and cos**</span><br></pre></td></tr></table></figure>
<p>x = linspace(0, 2*pi, 100);<br>y = sin(x);<br>plot(x,y)<br>y2 = cos(x);<br>plot(x, y, x, y2);<br>plot(x, y, ‘-‘, x, y2, ‘.’);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Add noise point**</span><br></pre></td></tr></table></figure>
<p>x = linspace(0, 2<em>pi, 1000);<br>y = 10</em>sin(x) + randn(1,1000);<br>plot(x,y)</p>
<p>scatter(x,y)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- scatter is sorted, helpful in data analysis</span><br><span class="line"></span><br><span class="line">**bar chart**</span><br></pre></td></tr></table></figure>
<p>x = 1:10<br>bar(x)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Histogram**</span><br></pre></td></tr></table></figure>
<p>x = randn(1000,1);</p>
<blockquote>
<blockquote>
<p>hist(x)</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Pie chart**</span><br></pre></td></tr></table></figure>
<p>x = 1:5;<br>pie(x)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### File I&#x2F;O</span><br></pre></td></tr></table></figure>
<p>csvread()<br>csvwrite()<br>save()<br>load()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### subplots, 3D plot</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>x = linspace(0, 2*pi, 100);<br>y = sin(x)<br>z = y + randn(1,100);<br>plot(x,z,x, y)<br>subplot(2,1,1)<br>plot(x,y)</p>
<p>subplot(2,1,2); –&gt; print 2 rows, 1 column<br>plot(x,z)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**3D plot**</span><br></pre></td></tr></table></figure>
<p>z = randn(100,100);<br>size(z)<br>surf(z)<br>contour(z) –&gt; 2d visualization</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Title and label**</span><br></pre></td></tr></table></figure>
<p>title(‘A plot of sin(x)’)<br>xlabel(‘my label for x-axis’)<br>ylable(‘my lable for y-axis’)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Complete code to generate two graphs for sinx and cos x**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>x = linspace(0, 2*pi, 100);<br>y = sin(x);<br>plot(x,y)<br>title(‘A plot of sin(x)’)<br>xlabel(‘my label for x-axis’)<br>ylabel(‘my lable for y-axis’)<br>z = cos(x);<br>subplot(2,1,1) –&gt;first using subplot to choose a location, then plot at that place<br>plot(x,y)<br>title(‘sin(x)’)<br>subplot(2,1,2)<br>plot(x,z)<br>title(‘cos(x)’)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Sound processing </span><br></pre></td></tr></table></figure>
<p>d = audioread(‘daliwan.wav’)</p>
<p>[d,fs] = audioread(‘daliwan.wav’)<br>sound(d,fs) –&gt;play audio</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Reverse audio**</span><br></pre></td></tr></table></figure>
<p>d2 = flipud(d);<br>plot(d2)</p>
<p>//Store reversed audio file<br>audiowrite(‘daliwan_reverse.wav’, d2, fs)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**2x speed**</span><br></pre></td></tr></table></figure>
<p>d4 = downsampel(d,2) –&gt; d was the original audio<br>sound(d4,fs)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### Generate random values</span><br></pre></td></tr></table></figure>
<p>randi(10)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ans &#x3D; </span><br><span class="line">        9</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>R = randi(10, 3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R &#x3D;  </span><br><span class="line">        10  7  6</span><br><span class="line">        2   1  10</span><br><span class="line">        10  3  10</span><br><span class="line"></span><br><span class="line">**Histograph with random values**</span><br></pre></td></tr></table></figure>
<p>hist(rand(1000,1)</p>
<pre><code></code></pre>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Q48 Rotate Image</title>
    <url>/2021/01/15/LeetCode-Q48-Rotate-Image/</url>
    <content><![CDATA[<p>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</p>
<p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void rotate(int[][] matrix) &#123;</span><br><span class="line">    &#x2F;&#x2F;以对角线为轴交换</span><br><span class="line">    for (int i &#x3D; 0; i &lt;  matrix.length; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;j &lt;&#x3D; i 确保交换除了【0，0】，【1，1】和 【2，2】位置的数</span><br><span class="line">        for (int j &#x3D; 0; j &lt;&#x3D;i; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            if (i &#x3D;&#x3D; j) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            int temp &#x3D; matrix[i][j];</span><br><span class="line">            matrix[i][j] &#x3D; matrix[j][i];</span><br><span class="line">            matrix[j][i] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    &#x2F;&#x2F;交换column</span><br><span class="line">    &#x2F;&#x2F;左半边的值是i，右半边的值是j</span><br><span class="line">    &#x2F;&#x2F;j从最右边开始，与最左边的竖着交换，j往左递减</span><br><span class="line">    for (int i &#x3D; 0, j &#x3D; matrix.length - 1; i &lt; matrix.length &#x2F; 2; i++, j--) </span><br><span class="line">    &#123;</span><br><span class="line">        for (int k &#x3D; 0; k &lt; matrix.length; k++) &#123;</span><br><span class="line">            int temp &#x3D; matrix[k][i];</span><br><span class="line">            matrix[k][i] &#x3D; matrix[k][j];</span><br><span class="line">            matrix[k][j] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode Q49 Group Anagrams</title>
    <url>/2021/01/16/LeetCode-Q49-Group-Anagrams/</url>
    <content><![CDATA[<p>Given an array of strings strs, group the anagrams together. You can return the answer in any order.</p>
<p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution </span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) </span><br><span class="line">    &#123;</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;主要思路是利用sort，将eat，ate，tea全部sort成aet</span><br><span class="line">        &#x2F;&#x2F;然后在hashmap里找，如果有相同的就加入map</span><br><span class="line">        for(int i &#x3D; 0; i &lt; strs.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            char[] letter &#x3D; strs[i].toCharArray();</span><br><span class="line">            Arrays.sort(letter);</span><br><span class="line">            String key &#x3D; String.valueOf(letter);</span><br><span class="line">        &#x2F;&#x2F;String ley store values sorted</span><br><span class="line">        &#x2F;&#x2F;key: &quot;aet&quot;</span><br><span class="line">            if(map.containsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                map.get(key).add(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                List&lt;String&gt; tempList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">                tempList.add(strs[i]);</span><br><span class="line">                map.put(key, tempList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new ArrayList&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
</search>
